<%- contentFor('style') %>
<link rel="stylesheet" href="/css/main.css">
<style>
    .profile-container {
        max-width: 95%;
        margin: 0 auto;
        padding: 30px;
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0,0,0,0.1);
    }
    
    .profile-image-container {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        overflow: hidden;
        margin: 0 auto 20px;
        border: 3px solid #f0f0f0;
    }
    
    .profile-image-container img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    .section-title {
        font-size: 28px;
        margin-bottom: 30px;
        color: #333;
        text-align: center;
        border-bottom: 2px solid #f0f0f0;
        padding-bottom: 15px;
    }
    
    .section-subtitle {
        font-size: 20px;
        color: #555;
        margin: 25px 0 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }
    
    .form-section {
        margin-bottom: 30px;
    }
    
    .form-actions {
        margin-top: 30px;
        text-align: center;
    }
    
    .group-item {
        background: #f9f9f9;
        border-radius: 8px;
        padding: 12px 15px;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        transition: all 0.3s ease;
    }
    
    .group-item:hover {
        background: #f1f1f1;
        transform: translateY(-2px);
    }
    
    .group-item img {
        width: 40px;
        height: 40px;
        border-radius: 8px;
        margin-right: 15px;
    }
    
    .switch-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 15px;
    }
    
    .switch {
        position: relative;
        display: inline-block;
        width: 50px;
        height: 24px;
    }
    
    .switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }
    
    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 24px;
    }
    
    .slider:before {
        position: absolute;
        content: "";
        height: 16px;
        width: 16px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: .4s;
        border-radius: 50%;
    }
    
    input:checked + .slider {
        background-color: #2196F3;
    }
    
    input:checked + .slider:before {
        transform: translateX(26px);
    }
    
    .account-link {
        display: flex;
        align-items: center;
        background: #f9f9f9;
        border-radius: 8px;
        padding: 12px 15px;
        margin-bottom: 10px;
    }
    
    .account-link i {
        font-size: 20px;
        margin-right: 15px;
        width: 24px;
        text-align: center;
    }
</style>

<%- contentFor('body') %>
<div class="main-content">
    <div class="container">
        <div class="profile-container">
            <h1 class="section-title">Edit Profile</h1>
            
            <form id="profileForm" class="profile-form">
                <!-- Profile Image -->
                <div class="profile-image-section">
                    <div class="profile-image-container">
                        <img id="profileImagePreview" src="/assets/images/avatar-placeholder.jpg" alt="Profile Image">
                    </div>
                    <div class="text-center">
                        <label for="profileImage" class="btn btn-outline-primary mt-3">
                            <i class="fas fa-camera"></i> Change Profile Picture
                        </label>
                        <input type="file" id="profileImage" name="profileImage" accept="image/*" class="d-none">
                    </div>
                </div>
                
                <!-- Personal Information -->
                <div class="form-section">
                    <h2 class="section-subtitle">Personal Information</h2>
                    
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="firstName">First Name</label>
                            <input type="text" id="firstName" name="firstName" class="form-control" required>
                        </div>
                        
                        <div class="form-group col-md-6">
                            <label for="lastName">Last Name</label>
                            <input type="text" id="lastName" name="lastName" class="form-control" required>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="nickname">Nickname (Optional)</label>
                        <input type="text" id="nickname" name="nickname" class="form-control">
                    </div>
                    
                    <div class="form-group">
                        <label for="username">Username</label>
                        <input type="text" id="username" name="username" class="form-control" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="email">Email</label>
                        <input type="email" id="email" name="email" class="form-control" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="phoneNumber">Phone Number</label>
                        <input type="tel" id="phoneNumber" name="phoneNumber" class="form-control">
                    </div>
                </div>
                
                <!-- Location Information -->
                <div class="form-section">
                    <h2 class="section-subtitle">Location Information <small class="text-muted">(Optional for privacy)</small></h2>
                    
                    <div class="form-row">
                        <div class="form-group col-md-5">
                            <label for="city">City</label>
                            <input type="text" id="city" name="city" class="form-control">
                        </div>
                        
                        <div class="form-group col-md-3">
                            <label for="state">State</label>
                            <input type="text" id="state" name="state" class="form-control">
                        </div>
                        
                        <div class="form-group col-md-4">
                            <label for="zipCode">Zip Code</label>
                            <input type="text" id="zipCode" name="zipCode" class="form-control">
                        </div>
                    </div>
                </div>
                
                <!-- Group Involvement -->
                <div class="form-section">
                    <h2 class="section-subtitle">Group Involvement</h2>
                    
                    <div id="joinedGroups">
                        <p class="text-muted">You haven't joined any groups yet.</p>
                        
                        <!-- Groups will be dynamically added here -->
                        <!-- Example of how a group item will look: -->
                        <div class="group-item d-none" id="groupItemTemplate">
                            <img src="/assets/images/group-placeholder.jpg" alt="Group">
                            <div class="group-info">
                                <h5 class="group-name mb-1">Group Name</h5>
                                <p class="group-role mb-0">Member since: <span class="join-date">Jan 1, 2025</span></p>
                            </div>
                            <a href="#" class="btn btn-sm btn-outline-primary ml-auto group-link">View Group</a>
                        </div>
                    </div>
                </div>
                
                <!-- Settings & Privacy Controls -->
                <div class="form-section">
                    <h2 class="section-subtitle">Settings & Privacy Controls</h2>
                    
                    <h5 class="mt-4 mb-3">Profile Visibility</h5>
                    
                    <div class="switch-container">
                        <span>Show full name to group members</span>
                        <label class="switch">
                            <input type="checkbox" id="showNameToggle" name="showNameToggle" checked>
                            <span class="slider"></span>
                        </label>
                    </div>
                    
                    <div class="switch-container">
                        <span>Show location information to group members</span>
                        <label class="switch">
                            <input type="checkbox" id="showLocationToggle" name="showLocationToggle">
                            <span class="slider"></span>
                        </label>
                    </div>
                    
                    <div class="switch-container">
                        <span>Show profile picture to non-members</span>
                        <label class="switch">
                            <input type="checkbox" id="showPictureToggle" name="showPictureToggle">
                            <span class="slider"></span>
                        </label>
                    </div>
                    
                    <h5 class="mt-4 mb-3">Notification Preferences</h5>
                    
                    <div class="switch-container">
                        <span>Email notifications for group activities</span>
                        <label class="switch">
                            <input type="checkbox" id="emailNotifyToggle" name="emailNotifyToggle" checked>
                            <span class="slider"></span>
                        </label>
                    </div>
                    
                    <div class="switch-container">
                        <span>In-app notifications</span>
                        <label class="switch">
                            <input type="checkbox" id="appNotifyToggle" name="appNotifyToggle" checked>
                            <span class="slider"></span>
                        </label>
                    </div>
                    
                    <div class="switch-container">
                        <span>New group invitations</span>
                        <label class="switch">
                            <input type="checkbox" id="groupInviteToggle" name="groupInviteToggle" checked>
                            <span class="slider"></span>
                        </label>
                    </div>
                    
                    <h5 class="mt-4 mb-3">Connected Accounts</h5>
                    
                    <div class="account-links">
                        <div class="account-link">
                            <i class="fab fa-facebook text-primary"></i>
                            <div class="flex-grow-1">
                                <p class="mb-0">Facebook</p>
                                <small class="text-muted">Not connected</small>
                            </div>
                            <button type="button" class="btn btn-sm btn-outline-primary connect-account" data-platform="facebook">Connect</button>
                        </div>
                        
                        <div class="account-link">
                            <i class="fab fa-twitter text-info"></i>
                            <div class="flex-grow-1">
                                <p class="mb-0">Twitter</p>
                                <small class="text-muted">Not connected</small>
                            </div>
                            <button type="button" class="btn btn-sm btn-outline-primary connect-account" data-platform="twitter">Connect</button>
                        </div>
                        
                        <div class="account-link">
                            <i class="fab fa-linkedin text-primary"></i>
                            <div class="flex-grow-1">
                                <p class="mb-0">LinkedIn</p>
                                <small class="text-muted">Not connected</small>
                            </div>
                            <button type="button" class="btn btn-sm btn-outline-primary connect-account" data-platform="linkedin">Connect</button>
                        </div>
                    </div>
                </div>
                
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                    <a href="/profile" class="btn btn-secondary">Cancel</a>
                </div>
            </form>
            
            <div id="errorMessage" class="alert alert-danger d-none"></div>
            <div id="successMessage" class="alert alert-success d-none"></div>
        </div>
    </div>
</div>

<%- contentFor('script') %>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const profileForm = document.getElementById('profileForm');
        const errorMessage = document.getElementById('errorMessage');
        const successMessage = document.getElementById('successMessage');
        const profileImageInput = document.getElementById('profileImage');
        const profileImagePreview = document.getElementById('profileImagePreview');
        
        // Check if user is logged in
        const token = localStorage.getItem('token');
        if (!token) {
            window.location.href = '/login?redirect=/profile-edit';
            return;
        }
        
        // Load user profile data
        loadUserProfile();
        
        // Handle profile image change
        profileImageInput.addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    profileImagePreview.src = e.target.result;
                };
                reader.readAsDataURL(file);
            }
        });
        
        // Load user groups
        loadUserGroups();
        
        // Handle form submission
        profileForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            // Hide previous messages
            errorMessage.classList.add('d-none');
            successMessage.classList.add('d-none');
            
            // Get form values
            const firstName = document.getElementById('firstName').value;
            const lastName = document.getElementById('lastName').value;
            const nickname = document.getElementById('nickname').value;
            const username = document.getElementById('username').value;
            const email = document.getElementById('email').value;
            const phoneNumber = document.getElementById('phoneNumber').value;
            const city = document.getElementById('city').value;
            const state = document.getElementById('state').value;
            const zipCode = document.getElementById('zipCode').value;
            
            // Get privacy settings
            const showName = document.getElementById('showNameToggle').checked;
            const showLocation = document.getElementById('showLocationToggle').checked;
            const showPicture = document.getElementById('showPictureToggle').checked;
            
            // Get notification preferences
            const emailNotify = document.getElementById('emailNotifyToggle').checked;
            const appNotify = document.getElementById('appNotifyToggle').checked;
            const groupInvite = document.getElementById('groupInviteToggle').checked;
            
            try {
                const response = await fetch('/api/auth/profile', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': token
                    },
                    body: JSON.stringify({
                        firstName,
                        lastName,
                        nickname,
                        username,
                        email,
                        phoneNumber,
                        city,
                        state,
                        zipCode,
                        privacy: {
                            showName,
                            showLocation,
                            showPicture
                        },
                        notifications: {
                            emailNotify,
                            appNotify,
                            groupInvite
                        }
                    })
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    // Update user data in localStorage
                    localStorage.setItem('user', JSON.stringify(data.user));
                    
                    // Show success message
                    successMessage.textContent = 'Profile updated successfully!';
                    successMessage.classList.remove('d-none');
                    
                    // Scroll to top of form
                    window.scrollTo(0, 0);
                } else {
                    // Show error message
                    errorMessage.textContent = data.message || 'An error occurred while updating profile.';
                    errorMessage.classList.remove('d-none');
                }
            } catch (error) {
                console.error('Error updating profile:', error);
                errorMessage.textContent = 'An error occurred while updating profile. Please try again.';
                errorMessage.classList.remove('d-none');
            }
        });
        
        // Function to load user profile data
        async function loadUserProfile() {
            try {
                const response = await fetch('/api/auth/profile', {
                    method: 'GET',
                    headers: {
                        'Authorization': token
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    const user = data.user;
                    
                    // Fill form with user data
                    document.getElementById('firstName').value = user.firstName || '';
                    document.getElementById('lastName').value = user.lastName || '';
                    document.getElementById('nickname').value = user.nickname || '';
                    document.getElementById('username').value = user.username || '';
                    document.getElementById('email').value = user.email || '';
                    document.getElementById('phoneNumber').value = user.phoneNumber || '';
                    document.getElementById('city').value = user.city || '';
                    document.getElementById('state').value = user.state || '';
                    document.getElementById('zipCode').value = user.zipCode || '';
                    
                    // Set privacy toggles
                    if (user.privacy) {
                        document.getElementById('showNameToggle').checked = user.privacy.showName !== false;
                        document.getElementById('showLocationToggle').checked = !!user.privacy.showLocation;
                        document.getElementById('showPictureToggle').checked = !!user.privacy.showPicture;
                    }
                    
                    // Set notification toggles
                    if (user.notifications) {
                        document.getElementById('emailNotifyToggle').checked = user.notifications.emailNotify !== false;
                        document.getElementById('appNotifyToggle').checked = user.notifications.appNotify !== false;
                        document.getElementById('groupInviteToggle').checked = user.notifications.groupInvite !== false;
                    }
                    
                    // Update profile image if available
                    if (user.profileImage) {
                        profileImagePreview.src = user.profileImage;
                    }
                } else {
                    // If unauthorized, redirect to login
                    if (response.status === 401 || response.status === 403) {
                        localStorage.removeItem('token');
                        localStorage.removeItem('user');
                        window.location.href = '/login?redirect=/profile-edit';
                    } else {
                        const data = await response.json();
                        errorMessage.textContent = data.message || 'Failed to load profile data.';
                        errorMessage.classList.remove('d-none');
                    }
                }
            } catch (error) {
                console.error('Error loading profile:', error);
                errorMessage.textContent = 'An error occurred while loading profile data.';
                errorMessage.classList.remove('d-none');
            }
        }
        
        // Function to load user groups
        async function loadUserGroups() {
            try {
                const response = await fetch('/api/groups/user', {
                    method: 'GET',
                    headers: {
                        'Authorization': token
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    const groups = data.groups;
                    
                    const joinedGroupsContainer = document.getElementById('joinedGroups');
                    const template = document.getElementById('groupItemTemplate');
                    
                    // Clear container except for template
                    while (joinedGroupsContainer.firstChild) {
                        joinedGroupsContainer.removeChild(joinedGroupsContainer.firstChild);
                    }
                    
                    if (groups && groups.length > 0) {
                        groups.forEach(group => {
                            const groupItem = template.cloneNode(true);
                            groupItem.classList.remove('d-none');
                            groupItem.removeAttribute('id');
                            
                            const groupImg = groupItem.querySelector('img');
                            const groupName = groupItem.querySelector('.group-name');
                            const joinDate = groupItem.querySelector('.join-date');
                            const groupLink = groupItem.querySelector('.group-link');
                            
                            if (group.image) {
                                groupImg.src = group.image;
                            }
                            
                            groupName.textContent = group.name;
                            
                            if (group.joinedDate) {
                                // Format date
                                const date = new Date(group.joinedDate);
                                joinDate.textContent = date.toLocaleDateString('en-US', { 
                                    month: 'short', 
                                    day: 'numeric', 
                                    year: 'numeric' 
                                });
                            }
                            
                            groupLink.href = `/groups/${group.id}`;
                            
                            joinedGroupsContainer.appendChild(groupItem);
                        });
                    } else {
                        const noGroupsMsg = document.createElement('p');
                        noGroupsMsg.className = 'text-muted';
                        noGroupsMsg.textContent = 'You haven\'t joined any groups yet.';
                        joinedGroupsContainer.appendChild(noGroupsMsg);
                    }
                    
                    // Add the template back (hidden)
                    joinedGroupsContainer.appendChild(template);
                } else {
                    console.error('Failed to load user groups');
                }
            } catch (error) {
                console.error('Error loading user groups:', error);
            }
        }
        
        // Handle social account connections
        const connectButtons = document.querySelectorAll('.connect-account');
        connectButtons.forEach(button => {
            button.addEventListener('click', function() {
                const platform = this.getAttribute('data-platform');
                // This would typically open a popup for OAuth authentication
                alert(`Connect to ${platform} functionality would go here.`);
            });
        });
    });
</script>